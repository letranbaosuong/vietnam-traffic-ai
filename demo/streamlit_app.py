#!/usr/bin/env python3
"""
Streamlit Web Demo cho Vietnam Traffic AI System
"""

import streamlit as st
import cv2
import numpy as np
import sys
import os
from pathlib import Path
import tempfile
import json
from PIL import Image

# Add src to path
sys.path.append(os.path.join(os.path.dirname(__file__), '..', 'src'))

from modules.object_detection import ObjectDetector
from modules.traffic_sign_detection import TrafficSignDetector
from modules.pose_analysis import PoseAnalyzer

# Page config
st.set_page_config(
    page_title="Vietnam Traffic AI System",
    page_icon="üö¶",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Custom CSS
st.markdown("""
<style>
.main-header {
    font-size: 3rem;
    color: #FF6B6B;
    text-align: center;
    margin-bottom: 2rem;
}
.module-header {
    font-size: 1.5rem;
    color: #4ECDC4;
    margin-bottom: 1rem;
}
.stats-box {
    background-color: #f0f2f6;
    padding: 1rem;
    border-radius: 0.5rem;
    margin-bottom: 1rem;
}
</style>
""", unsafe_allow_html=True)

@st.cache_resource
def load_models():
    """Load AI models (cached)"""
    config_path = "configs/config.yaml"
    
    try:
        object_detector = ObjectDetector(config_path)
        sign_detector = TrafficSignDetector(config_path)  
        pose_analyzer = PoseAnalyzer(config_path)
        
        return object_detector, sign_detector, pose_analyzer
    except Exception as e:
        st.error(f"L·ªói khi t·∫£i models: {str(e)}")
        return None, None, None

def process_image(image, modules, enable_modules):
    """Process image with selected modules"""
    results = {}
    processed_image = image.copy()
    
    try:
        # Object Detection
        if enable_modules.get('objects', False) and modules[0] is not None:
            detections = modules[0].detect(image)
            processed_image = modules[0].draw_detections(processed_image, detections)
            results['objects'] = modules[0].get_traffic_statistics(detections)
        
        # Traffic Sign Detection
        if enable_modules.get('signs', False) and modules[1] is not None:
            signs = modules[1].detect_traffic_signs(image)
            processed_image = modules[1].draw_signs(processed_image, signs)
            results['signs'] = modules[1].get_sign_statistics(signs)
        
        # Pose Analysis
        if enable_modules.get('pose', False) and modules[2] is not None:
            poses = modules[2].analyze_pose(image)
            processed_image = modules[2].draw_pose(processed_image, poses)
            results['poses'] = modules[2].get_pose_statistics(poses)
        
        return processed_image, results
    
    except Exception as e:
        st.error(f"L·ªói khi x·ª≠ l√Ω ·∫£nh: {str(e)}")
        return image, {}

def main():
    # Header
    st.markdown('<h1 class="main-header">üö¶ Vietnam Traffic AI System</h1>', unsafe_allow_html=True)
    st.markdown("### H·ªá th·ªëng AI ph√¢n t√≠ch giao th√¥ng Vi·ªát Nam")
    
    # Sidebar
    st.sidebar.markdown("## ‚öôÔ∏è C·∫•u h√¨nh")
    
    # Module selection
    st.sidebar.markdown("### Ch·ªçn Module AI")
    enable_objects = st.sidebar.checkbox("üöó Ph√°t hi·ªán ƒë·ªëi t∆∞·ª£ng", value=True)
    enable_signs = st.sidebar.checkbox("üö∏ Nh·∫≠n d·∫°ng bi·ªÉn b√°o", value=True)  
    enable_pose = st.sidebar.checkbox("üö∂ Ph√¢n t√≠ch t∆∞ th·∫ø", value=True)
    
    enable_modules = {
        'objects': enable_objects,
        'signs': enable_signs, 
        'pose': enable_pose
    }
    
    # Load models
    with st.sidebar:
        if st.button("üîÑ T·∫£i l·∫°i Models"):
            st.cache_resource.clear()
        
        with st.spinner("ƒêang t·∫£i AI models..."):
            modules = load_models()
    
    if modules[0] is None:
        st.error("‚ùå Kh√¥ng th·ªÉ t·∫£i models. Vui l√≤ng ki·ªÉm tra c·∫•u h√¨nh.")
        return
    
    # Main tabs
    tab1, tab2, tab3, tab4 = st.tabs(["üì∏ Upload ·∫¢nh", "üìπ Upload Video", "üìä Th·ªëng k√™", "‚ÑπÔ∏è H∆∞·ªõng d·∫´n"])
    
    with tab1:
        st.markdown('<div class="module-header">Upload v√† ph√¢n t√≠ch ·∫£nh</div>', unsafe_allow_html=True)
        
        uploaded_file = st.file_uploader(
            "Ch·ªçn ·∫£nh giao th√¥ng...", 
            type=['jpg', 'jpeg', 'png'],
            help="Upload ·∫£nh giao th√¥ng ƒë·ªÉ ph√¢n t√≠ch"
        )
        
        if uploaded_file is not None:
            # Display original image
            image = Image.open(uploaded_file)
            image_np = np.array(image)
            image_cv = cv2.cvtColor(image_np, cv2.COLOR_RGB2BGR)
            
            col1, col2 = st.columns(2)
            
            with col1:
                st.markdown("#### üì∑ ·∫¢nh g·ªëc")
                st.image(image, use_column_width=True)
            
            # Process image
            with st.spinner("ƒêang ph√¢n t√≠ch..."):
                processed_image, results = process_image(image_cv, modules, enable_modules)
                processed_image_rgb = cv2.cvtColor(processed_image, cv2.COLOR_BGR2RGB)
            
            with col2:
                st.markdown("#### üîç ·∫¢nh ƒë√£ ph√¢n t√≠ch")
                st.image(processed_image_rgb, use_column_width=True)
            
            # Display results
            if results:
                st.markdown("### üìä K·∫øt qu·∫£ ph√¢n t√≠ch")
                
                col1, col2, col3 = st.columns(3)
                
                # Object detection results
                if 'objects' in results:
                    with col1:
                        st.markdown('<div class="stats-box">', unsafe_allow_html=True)
                        st.markdown("#### üöó ƒê·ªëi t∆∞·ª£ng")
                        obj_stats = results['objects']
                        st.metric("T·ªïng ƒë·ªëi t∆∞·ª£ng", obj_stats.get('total_objects', 0))
                        st.metric("Ph∆∞∆°ng ti·ªán", obj_stats.get('vehicles', 0))
                        st.metric("Ng∆∞·ªùi ƒëi b·ªô", obj_stats.get('people', 0))
                        st.metric("Xe m√°y", obj_stats.get('motorcycles', 0))
                        st.markdown('</div>', unsafe_allow_html=True)
                
                # Traffic sign results  
                if 'signs' in results:
                    with col2:
                        st.markdown('<div class="stats-box">', unsafe_allow_html=True)
                        st.markdown("#### üö∏ Bi·ªÉn b√°o")
                        sign_stats = results['signs']
                        st.metric("T·ªïng bi·ªÉn b√°o", sign_stats.get('total_signs', 0))
                        st.metric("ƒê·ªô tin c·∫≠y cao", sign_stats.get('high_confidence', 0))
                        
                        if sign_stats.get('by_type'):
                            st.markdown("**Lo·∫°i bi·ªÉn b√°o:**")
                            for sign_type, count in sign_stats['by_type'].items():
                                st.text(f"‚Ä¢ {sign_type}: {count}")
                        st.markdown('</div>', unsafe_allow_html=True)
                
                # Pose analysis results
                if 'poses' in results:
                    with col3:
                        st.markdown('<div class="stats-box">', unsafe_allow_html=True)
                        st.markdown("#### üö∂ T∆∞ th·∫ø ng∆∞·ªùi")
                        pose_stats = results['poses'] 
                        st.metric("Ng∆∞·ªùi ph√°t hi·ªán", pose_stats.get('total_people', 0))
                        
                        if pose_stats.get('risk_levels'):
                            st.markdown("**M·ª©c ƒë·ªô r·ªßi ro:**")
                            for level, count in pose_stats['risk_levels'].items():
                                st.text(f"‚Ä¢ {level}: {count}")
                        
                        if pose_stats.get('behaviors'):
                            st.markdown("**H√†nh vi:**")
                            for behavior, count in pose_stats['behaviors'].items():
                                st.text(f"‚Ä¢ {behavior}: {count}")
                        st.markdown('</div>', unsafe_allow_html=True)
                
                # Download processed image
                st.markdown("### üíæ T·∫£i xu·ªëng")
                processed_pil = Image.fromarray(processed_image_rgb)
                
                # Convert to bytes
                import io
                buf = io.BytesIO()
                processed_pil.save(buf, format='PNG')
                
                st.download_button(
                    label="üì• T·∫£i ·∫£nh ƒë√£ x·ª≠ l√Ω",
                    data=buf.getvalue(),
                    file_name=f"processed_{uploaded_file.name}",
                    mime="image/png"
                )
    
    with tab2:
        st.markdown('<div class="module-header">Upload v√† ph√¢n t√≠ch video</div>', unsafe_allow_html=True)
        
        uploaded_video = st.file_uploader(
            "Ch·ªçn video giao th√¥ng...",
            type=['mp4', 'avi', 'mov'],
            help="Upload video giao th√¥ng ƒë·ªÉ ph√¢n t√≠ch"
        )
        
        if uploaded_video is not None:
            # Save uploaded video to temp file
            with tempfile.NamedTemporaryFile(delete=False, suffix='.mp4') as tmp_file:
                tmp_file.write(uploaded_video.read())
                temp_video_path = tmp_file.name
            
            # Display video
            st.video(uploaded_video)
            
            if st.button("üîç Ph√¢n t√≠ch Video"):
                progress_bar = st.progress(0)
                status_text = st.empty()
                
                # Process video frame by frame
                cap = cv2.VideoCapture(temp_video_path)
                total_frames = int(cap.get(cv2.CAP_PROP_FRAME_COUNT))
                
                # Prepare output video
                fps = int(cap.get(cv2.CAP_PROP_FPS))
                width = int(cap.get(cv2.CAP_PROP_FRAME_WIDTH))  
                height = int(cap.get(cv2.CAP_PROP_FRAME_HEIGHT))
                
                with tempfile.NamedTemporaryFile(delete=False, suffix='.mp4') as tmp_out:
                    output_path = tmp_out.name
                
                fourcc = cv2.VideoWriter_fourcc(*'mp4v')
                out = cv2.VideoWriter(output_path, fourcc, fps, (width, height))
                
                frame_count = 0
                video_stats = []
                
                while True:
                    ret, frame = cap.read()
                    if not ret:
                        break
                    
                    # Process frame
                    processed_frame, frame_results = process_image(frame, modules, enable_modules)
                    out.write(processed_frame)
                    
                    # Collect stats
                    video_stats.append(frame_results)
                    
                    # Update progress
                    frame_count += 1
                    progress = frame_count / total_frames
                    progress_bar.progress(progress)
                    status_text.text(f"X·ª≠ l√Ω frame {frame_count}/{total_frames}")
                
                cap.release()
                out.release()
                
                st.success("‚úÖ Video ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω!")
                
                # Display processed video
                with open(output_path, 'rb') as video_file:
                    video_bytes = video_file.read()
                    st.video(video_bytes)
                
                # Download processed video
                st.download_button(
                    label="üì• T·∫£i video ƒë√£ x·ª≠ l√Ω",
                    data=video_bytes,
                    file_name=f"processed_{uploaded_video.name}",
                    mime="video/mp4"
                )
                
                # Cleanup temp files
                os.unlink(temp_video_path)
                os.unlink(output_path)
    
    with tab3:
        st.markdown('<div class="module-header">Th·ªëng k√™ v√† ph√¢n t√≠ch</div>', unsafe_allow_html=True)
        
        st.markdown("""
        ### üìà Dashboard th·ªëng k√™
        Khu v·ª±c n√†y s·∫Ω hi·ªÉn th·ªã:
        - Bi·ªÉu ƒë·ªì th·ªëng k√™ theo th·ªùi gian
        - Ph√¢n t√≠ch m·∫≠t ƒë·ªô giao th√¥ng
        - Xu h∆∞·ªõng c√°c lo·∫°i ph∆∞∆°ng ti·ªán
        - T·∫ßn su·∫•t bi·ªÉn b√°o
        - Ph√¢n t√≠ch h√†nh vi ng∆∞·ªùi ƒëi b·ªô
        """)
        
        # Placeholder for statistics
        col1, col2 = st.columns(2)
        with col1:
            st.markdown("#### üöó Th·ªëng k√™ ph∆∞∆°ng ti·ªán")
            # Create sample chart
            import pandas as pd
            import matplotlib.pyplot as plt
            
            sample_data = {
                'Lo·∫°i xe': ['Xe m√°y', '√î t√¥', 'Xe bu√Ωt', 'Xe t·∫£i', 'Xe ƒë·∫°p'],
                'S·ªë l∆∞·ª£ng': [150, 80, 15, 25, 30]
            }
            df = pd.DataFrame(sample_data)
            st.bar_chart(df.set_index('Lo·∫°i xe'))
        
        with col2:
            st.markdown("#### üö∏ Th·ªëng k√™ bi·ªÉn b√°o")
            sample_signs = {
                'Lo·∫°i bi·ªÉn': ['C·∫•m', 'Ch·ªâ d·∫´n', 'C·∫£nh b√°o', 'Gi·ªõi h·∫°n t·ªëc ƒë·ªô'],
                'S·ªë l∆∞·ª£ng': [25, 40, 30, 20]
            }
            df_signs = pd.DataFrame(sample_signs)
            st.bar_chart(df_signs.set_index('Lo·∫°i bi·ªÉn'))
    
    with tab4:
        st.markdown('<div class="module-header">H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng</div>', unsafe_allow_html=True)
        
        st.markdown("""
        ## üéØ Gi·ªõi thi·ªáu
        **Vietnam Traffic AI System** l√† h·ªá th·ªëng AI t√≠ch h·ª£p nhi·ªÅu module ƒë·ªÉ ph√¢n t√≠ch giao th√¥ng Vi·ªát Nam.
        
        ## üîß C√°c t√≠nh nƒÉng ch√≠nh
        
        ### üöó Ph√°t hi·ªán ƒë·ªëi t∆∞·ª£ng
        - Nh·∫≠n d·∫°ng xe c·ªô (√¥ t√¥, xe m√°y, xe bu√Ωt, xe t·∫£i)
        - Ph√°t hi·ªán ng∆∞·ªùi ƒëi b·ªô
        - Th·ªëng k√™ m·∫≠t ƒë·ªô giao th√¥ng
        - ƒê·∫∑c bi·ªát t·ªëi ∆∞u cho xe m√°y (ƒë·∫∑c tr∆∞ng VN)
        
        ### üö∏ Nh·∫≠n d·∫°ng bi·ªÉn b√°o
        - ƒê·ªçc bi·ªÉn b√°o ti·∫øng Vi·ªát v√† ti·∫øng Anh
        - Ph√¢n lo·∫°i c√°c lo·∫°i bi·ªÉn b√°o giao th√¥ng
        - Ph√°t hi·ªán bi·ªÉn t·ªëc ƒë·ªô, c·∫•m, ch·ªâ d·∫´n
        - X·ª≠ l√Ω trong ƒëi·ªÅu ki·ªán th·ªùi ti·∫øt kh√°c nhau
        
        ### üö∂ Ph√¢n t√≠ch t∆∞ th·∫ø
        - Theo d√µi h∆∞·ªõng nh√¨n c·ªßa ng∆∞·ªùi ƒëi b·ªô
        - Ph√°t hi·ªán c·ª≠ ch·ªâ ra hi·ªáu
        - ƒê√°nh gi√° m·ª©c ƒë·ªô r·ªßi ro
        - Ph√¢n t√≠ch h√†nh vi giao th√¥ng
        
        ## üöÄ C√°ch s·ª≠ d·ª•ng
        
        1. **Upload ·∫£nh/video**: Ch·ªçn file t·ª´ m√°y t√≠nh
        2. **Ch·ªçn module**: B·∫≠t/t·∫Øt c√°c t√≠nh nƒÉng theo nhu c·∫ßu
        3. **Ph√¢n t√≠ch**: Nh·∫•n n√∫t ph√¢n t√≠ch v√† ch·ªù k·∫øt qu·∫£
        4. **Xem k·∫øt qu·∫£**: Quan s√°t ·∫£nh/video ƒë√£ x·ª≠ l√Ω v√† th·ªëng k√™
        5. **T·∫£i xu·ªëng**: Download k·∫øt qu·∫£ v·ªÅ m√°y
        
        ## ‚öôÔ∏è C·∫•u h√¨nh
        
        - **ƒê·ªô tin c·∫≠y**: ƒêi·ªÅu ch·ªânh ng∆∞·ª°ng ph√°t hi·ªán
        - **Ch·∫•t l∆∞·ª£ng**: Ch·ªçn gi·ªØa t·ªëc ƒë·ªô v√† ƒë·ªô ch√≠nh x√°c
        - **Module**: B·∫≠t/t·∫Øt c√°c t√≠nh nƒÉng theo nhu c·∫ßu
        
        ## üîÑ Command Line
        
        Ngo√†i web interface, b·∫°n c√≥ th·ªÉ s·ª≠ d·ª•ng qua command line:
        
        ```bash
        # Webcam real-time
        python main.py --mode webcam
        
        # X·ª≠ l√Ω video
        python main.py --mode video --input video.mp4 --output result.mp4
        
        # X·ª≠ l√Ω batch images
        python main.py --mode images --input images/ --output processed/
        
        # Ph√¢n t√≠ch th·ªëng k√™
        python main.py --mode analyze --input video.mp4 --output stats.json
        ```
        
        ## üìû H·ªó tr·ª£
        
        - **GitHub**: [vietnam-traffic-ai](https://github.com/your-repo)
        - **Issues**: B√°o c√°o l·ªói v√† g√≥p √Ω
        - **Documentation**: T√†i li·ªáu chi ti·∫øt trong th∆∞ m·ª•c `docs/`
        """)
        
        # System info
        st.markdown("---")
        st.markdown("### üîç Th√¥ng tin h·ªá th·ªëng")
        
        col1, col2, col3 = st.columns(3)
        with col1:
            st.info("**Framework**: YOLO, MediaPipe, EasyOCR")
        with col2:
            st.info("**Language**: Python 3.8+")
        with col3:
            st.info("**Platform**: Cross-platform")

if __name__ == "__main__":
    main()