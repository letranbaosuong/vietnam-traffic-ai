#!/usr/bin/env python3
"""
Demo ƒë∆°n gi·∫£n cho Raspberry Pi Real-time Traffic Detection
S·ª≠ d·ª•ng YOLO11n + NCNN optimization
"""

import sys
import os
sys.path.append(os.path.join(os.path.dirname(__file__), 'src'))

import cv2
import time
from modules.optimized_detection import OptimizedDetector, optimize_camera_settings

def main():
    print("üöÄ VIETNAM TRAFFIC AI - RASPBERRY PI DEMO")
    print("=" * 50)
    print("üéØ T·ªëi ∆∞u cho real-time detection tr√™n Raspberry Pi")
    print("‚ö° S·ª≠ d·ª•ng YOLO11n + NCNN cho hi·ªáu su·∫•t t·ªët nh·∫•t")
    print("üèçÔ∏è T·∫≠p trung ph√°t hi·ªán xe m√°y v√† giao th√¥ng Vi·ªát Nam")
    print("=" * 50)
    
    # Ki·ªÉm tra file config
    config_path = "configs/config.yaml"
    if not os.path.exists(config_path):
        print(f"‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y {config_path}")
        print("S·ª≠ d·ª•ng c·∫•u h√¨nh m·∫∑c ƒë·ªãnh...")
        config_path = None
    
    try:
        # Kh·ªüi t·∫°o detector t·ªëi ∆∞u
        print("üîß ƒêang kh·ªüi t·∫°o Optimized Detector...")
        detector = OptimizedDetector(
            config_path=config_path if config_path else "configs/config.yaml",
            use_ncnn=True  # B·∫≠t NCNN cho RPi
        )
        
        # M·ªü camera
        print("üìπ ƒêang m·ªü camera...")
        cap = cv2.VideoCapture(0)
        
        if not cap.isOpened():
            print("‚ùå Kh√¥ng th·ªÉ m·ªü camera!")
            print("üí° Ki·ªÉm tra:")
            print("   - Camera ƒë√£ k·∫øt n·ªëi ch∆∞a?")
            print("   - Permissions camera OK?") 
            print("   - Th·ª≠: sudo usermod -a -G video $USER")
            return
        
        # T·ªëi ∆∞u camera settings cho RPi
        cap = optimize_camera_settings(cap)
        
        # L·∫•y th√¥ng tin camera
        width = int(cap.get(cv2.CAP_PROP_FRAME_WIDTH))
        height = int(cap.get(cv2.CAP_PROP_FRAME_HEIGHT))
        fps = int(cap.get(cv2.CAP_PROP_FPS))
        
        print(f"‚úÖ Camera ready: {width}x{height} @ {fps} FPS")
        print("\nüéÆ ƒêi·ªÅu khi·ªÉn:")
        print("   - 'q': Tho√°t")
        print("   - 's': B·∫≠t/t·∫Øt statistics") 
        print("   - 'f': Hi·ªÉn th·ªã FPS")
        print("   - 'c': L∆∞u ·∫£nh hi·ªán t·∫°i")
        print("   - SPACE: Pause/Resume")
        print("\nüöÄ B·∫Øt ƒë·∫ßu detection...")
        
        # Bi·∫øn ƒëi·ªÅu khi·ªÉn
        show_stats = True
        show_fps = True
        paused = False
        frame_count = 0
        total_inference_time = 0
        start_time = time.time()
        
        while True:
            if not paused:
                ret, frame = cap.read()
                if not ret:
                    print("‚ö†Ô∏è Kh√¥ng ƒë·ªçc ƒë∆∞·ª£c frame t·ª´ camera")
                    break
                
                # ƒêo th·ªùi gian inference
                inference_start = time.time()
                detections = detector.detect_optimized(frame)
                inference_time = time.time() - inference_start
                
                # C·∫≠p nh·∫≠t statistics
                frame_count += 1
                total_inference_time += inference_time
                avg_inference_time = total_inference_time / frame_count
                current_fps = 1.0 / inference_time if inference_time > 0 else 0
                
                # V·∫Ω detections
                annotated_frame = detector.draw_detections_simple(frame, detections)
                
                # Th√™m th√¥ng tin overlay
                if show_stats:
                    stats = detector.get_traffic_stats_fast(detections)
                    
                    # Background cho text
                    overlay = annotated_frame.copy()
                    cv2.rectangle(overlay, (10, 10), (400, 180), (0, 0, 0), -1)
                    cv2.addWeighted(overlay, 0.6, annotated_frame, 0.4, 0, annotated_frame)
                    
                    # Hi·ªÉn th·ªã stats
                    y = 35
                    cv2.putText(annotated_frame, "VIETNAM TRAFFIC AI - RPi", 
                               (15, y), cv2.FONT_HERSHEY_SIMPLEX, 0.6, (0, 255, 255), 2)
                    
                    y += 30
                    if show_fps:
                        cv2.putText(annotated_frame, f"FPS: {current_fps:.1f} | Avg: {1.0/avg_inference_time:.1f}", 
                                   (15, y), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 255, 0), 1)
                        y += 25
                    
                    cv2.putText(annotated_frame, f"Total Objects: {stats['total']}", 
                               (15, y), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255, 255, 255), 1)
                    y += 25
                    
                    cv2.putText(annotated_frame, f"Vehicles: {stats['vehicles']} | People: {stats['people']}", 
                               (15, y), cv2.FONT_HERSHEY_SIMPLEX, 0.4, (255, 255, 255), 1)
                    y += 25
                    
                    cv2.putText(annotated_frame, f"Motorcycles: {stats['motorcycles']} (VN Focus)", 
                               (15, y), cv2.FONT_HERSHEY_SIMPLEX, 0.4, (255, 0, 255), 1)
                    y += 25
                    
                    # Runtime info
                    runtime = time.time() - start_time
                    cv2.putText(annotated_frame, f"Runtime: {runtime:.0f}s | Frames: {frame_count}", 
                               (15, y), cv2.FONT_HERSHEY_SIMPLEX, 0.4, (128, 128, 128), 1)
                
                # Hi·ªÉn th·ªã status n·∫øu paused
                if paused:
                    cv2.putText(annotated_frame, "PAUSED - Press SPACE to resume", 
                               (10, annotated_frame.shape[0] - 20), 
                               cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 0, 255), 2)
                
            else:
                # Khi pause, v·∫´n hi·ªÉn th·ªã frame cu·ªëi
                cv2.putText(annotated_frame, "PAUSED - Press SPACE to resume", 
                           (10, annotated_frame.shape[0] - 20), 
                           cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 0, 255), 2)
            
            # Hi·ªÉn th·ªã frame
            cv2.imshow('Vietnam Traffic AI - Raspberry Pi', annotated_frame)
            
            # X·ª≠ l√Ω input
            key = cv2.waitKey(1) & 0xFF
            
            if key == ord('q'):
                print("\nüõë Tho√°t theo y√™u c·∫ßu ng∆∞·ªùi d√πng")
                break
            elif key == ord('s'):
                show_stats = not show_stats
                print(f"üìä Statistics: {'ON' if show_stats else 'OFF'}")
            elif key == ord('f'):
                show_fps = not show_fps
                print(f"‚ö° FPS display: {'ON' if show_fps else 'OFF'}")
            elif key == ord('c'):
                # L∆∞u frame hi·ªán t·∫°i
                filename = f"capture_{int(time.time())}.jpg"
                cv2.imwrite(filename, annotated_frame)
                print(f"üì∑ ƒê√£ l∆∞u: {filename}")
            elif key == ord(' '):  # SPACE
                paused = not paused
                print(f"‚èØÔ∏è {'Paused' if paused else 'Resumed'}")
            
            # Hi·ªÉn th·ªã FPS trong console m·ªói 60 frames
            if frame_count % 60 == 0 and frame_count > 0:
                elapsed_time = time.time() - start_time
                overall_fps = frame_count / elapsed_time
                print(f"üìà Frame {frame_count}: Overall FPS = {overall_fps:.1f}, "
                      f"Current FPS = {current_fps:.1f}")
    
    except KeyboardInterrupt:
        print("\n‚å®Ô∏è D·ª´ng b·∫±ng Ctrl+C")
    
    except Exception as e:
        print(f"\n‚ùå L·ªói: {str(e)}")
        import traceback
        traceback.print_exc()
    
    finally:
        # Cleanup
        print("\nüßπ Cleaning up...")
        if 'cap' in locals():
            cap.release()
        cv2.destroyAllWindows()
        
        # Hi·ªÉn th·ªã th·ªëng k√™ cu·ªëi
        if 'frame_count' in locals() and frame_count > 0:
            total_time = time.time() - start_time
            avg_fps = frame_count / total_time
            print(f"\nüìä SESSION SUMMARY:")
            print(f"   - Total frames processed: {frame_count}")
            print(f"   - Total time: {total_time:.1f}s") 
            print(f"   - Average FPS: {avg_fps:.1f}")
            print(f"   - Average inference time: {avg_inference_time*1000:.1f}ms")
        
        print("‚úÖ Cleanup ho√†n th√†nh!")

def check_system():
    """Ki·ªÉm tra system requirements"""
    print("üîç Ki·ªÉm tra system...")
    
    # Ki·ªÉm tra Python version
    python_version = sys.version_info
    print(f"   Python: {python_version.major}.{python_version.minor}.{python_version.micro}")
    
    # Ki·ªÉm tra c√°c th∆∞ vi·ªán c·∫ßn thi·∫øt
    try:
        import cv2
        print(f"   OpenCV: {cv2.__version__}")
    except ImportError:
        print("   ‚ùå OpenCV ch∆∞a c√†i ƒë·∫∑t")
        return False
    
    try:
        from ultralytics import YOLO
        print("   ‚úÖ Ultralytics YOLO available")
    except ImportError:
        print("   ‚ùå Ultralytics ch∆∞a c√†i ƒë·∫∑t")
        print("   üí° Run: pip install ultralytics")
        return False
    
    # Ki·ªÉm tra camera
    cap = cv2.VideoCapture(0)
    if cap.isOpened():
        print("   ‚úÖ Camera accessible")
        cap.release()
    else:
        print("   ‚ö†Ô∏è Camera kh√¥ng th·ªÉ m·ªü")
    
    return True

if __name__ == "__main__":
    print("üîß VIETNAM TRAFFIC AI - RASPBERRY PI SETUP")
    print("=" * 50)
    
    if not check_system():
        print("‚ùå System check failed!")
        print("\nüí° Setup instructions:")
        print("1. pip install -r requirements.txt")
        print("2. sudo usermod -a -G video $USER")
        print("3. Reboot ƒë·ªÉ apply permissions")
        exit(1)
    
    print("‚úÖ System check passed!")
    print()
    
    main()